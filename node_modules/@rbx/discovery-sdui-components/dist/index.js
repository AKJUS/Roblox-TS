import React, { useEffect } from 'react';
import { makeStyles, Container, Button } from '@rbx/ui';
import bezier from 'bezier-easing';

const HeroUnitGradient = ({ gradient }) => {
    const { startColor, endColor, startOpacity, endOpacity, degree } = gradient;
    const linearGradient = `linear-gradient(${degree}deg, ${startColor}${Math.round(startOpacity * 255)
        .toString(16)
        .padStart(2, '0')}, ${endColor}${Math.round(endOpacity * 255)
        .toString(16)
        .padStart(2, '0')})`;
    const { classes: { heroUnitGradient } } = makeStyles()(() => ({
        heroUnitGradient: {
            background: linearGradient,
            width: '100%',
            height: '50%',
            bottom: '0px',
            left: '0px',
            position: 'absolute',
            '@media (max-width: 600px)': {
                height: '75%'
            }
        }
    }))();
    return React.createElement("div", { className: heroUnitGradient });
};

const foregroundParallaxLarge = 24;
const foregroundParallaxSmall = 16;
const heroUnitContentHeight = 336;
const textDropShadow = '2px 2px 4px rgba(0, 0, 0, 0.15)';

const HeroUnitContent = ({ title, subtitle, heroUnitRef, gradient, bottomRowComponent, overlayPillComponent }) => {
    const { classes: { heroUnitContentContainer, heroUnitTitleContainer, heroUnitTitle, heroUnitSubtitle, } } = makeStyles()(() => ({
        heroUnitContentContainer: {
            height: `${heroUnitContentHeight}px`,
            width: '100%',
            position: 'relative',
            display: 'flex',
            overflow: 'hidden',
            borderRadius: '8px',
            flexDirection: 'column',
            justifyContent: 'flex-end',
            padding: '20px',
            '@media (max-width: 600px)': {
                padding: '16px',
                aspectRatio: '16 / 9',
                height: 'auto'
            }
        },
        heroUnitTitleContainer: {
            position: 'absolute',
            top: '50%',
            transform: 'translateY(-50%)',
            display: 'flex',
            flexDirection: 'column',
            width: '100%',
        },
        heroUnitTitle: {
            color: 'white',
            position: 'relative',
            textShadow: `${textDropShadow}`,
            fontFamily: 'Builder Sans',
            fontSize: '40px',
            fontWeight: 700,
            lineHeight: '48px',
            '@media (max-width: 600px)': {
                fontSize: '24px',
                lineHeight: '28.8px'
            }
        },
        heroUnitSubtitle: {
            color: 'white',
            textShadow: `${textDropShadow}`,
            marginTop: '2px',
            position: 'relative',
            fontFamily: 'Builder Sans',
            fontSize: '16px',
            fontWeight: 400,
            lineHeight: '24px',
            '@media (max-width: 600px)': {
                display: 'none'
            }
        }
    }))();
    return (React.createElement("div", { className: heroUnitContentContainer, ref: heroUnitRef },
        React.createElement(HeroUnitGradient, { gradient: gradient }),
        overlayPillComponent,
        React.createElement("div", { className: heroUnitTitleContainer },
            React.createElement("span", { className: heroUnitTitle }, title),
            React.createElement("span", { className: heroUnitSubtitle }, subtitle)),
        bottomRowComponent));
};

const HeroUnitBackground = ({ backgroundImageComponent }) => {
    const { classes: { heroUnitBackgroundWindow, heroUnitBackgroundContainer } } = makeStyles()(() => ({
        heroUnitBackgroundWindow: {
            height: `${heroUnitContentHeight}px`,
            width: '100%',
            position: 'absolute',
            top: '24px',
            overflow: 'hidden',
            borderRadius: '8px',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            '@media (max-width: 600px)': {
                aspectRatio: '16 / 9',
                height: 'auto',
                top: '16px'
            }
        },
        heroUnitBackgroundContainer: {
            '--parallax-scale': '100',
            minWidth: 'max(100%, 1320px)',
            height: '436px',
            display: 'flex',
            flexDirection: 'column',
            transform: 'translateY(calc(var(--parallax-scale) * ((var(--scroll) * 1px) - 0.5px)))',
            '@media (min-width: 1320px)': {
                height: 'auto'
            },
            '@media (max-width: 600px)': {
                minHeight: 'calc(100% + 66px)',
                width: 'auto',
                '--parallax-scale': '66'
            }
        }
    }))();
    return (React.createElement("div", { className: heroUnitBackgroundWindow },
        React.createElement("div", { className: heroUnitBackgroundContainer }, backgroundImageComponent)));
};

/**
 * HeroUnit component
 *
 * This component renders a hero unit section with a background image, foreground image,
 * title, subtitle, badge text, gradient, experience information and a call-to-action button.
 * It also includes a parallax effect for the background and foreground images based on the
 * scroll position.
 *
 * @param {HeroUnitProps} props - The properties for the HeroUnit component.
 * @param {string} props.title - The title text for the hero unit.
 * @param {string} props.subtitle - The subtitle text for the hero unit.
 * @param {React.ReactNode} props.foregroundImageComponent - The foreground image component. Can be img or <Thumbnail2d>
 * @param {React.ReactNode} props.backgroundImageComponent - The background image component. Can be img or <Thumbnail2d>
 * @param {Gradient} props.gradient - The gradient overlay for the hero unit.
 * @param {() => void} [props.backgroundClickAction] - The action to perform when the background is clicked.
 * @param {React.ReactNode} props.bottomRowComponent - The component to render in the bottom row.
 * @param {React.ReactNode} props.overlayPillComponent - The component to render as an overlay pill.
 *
 * @returns {JSX.Element} The rendered HeroUnit component.
 */
const HeroUnit = ({ title, subtitle, foregroundImageComponent, backgroundImageComponent, gradient, backgroundClickAction: onBackgroundClick, bottomRowComponent, overlayPillComponent }) => {
    const heroUnitContentRef = React.useRef(null);
    const heroUnitContainerRef = React.useRef(null);
    const { classes: { heroUnitContainer, heroUnitForegroundContainer, heroUnitTopSpacer } } = makeStyles()(() => ({
        heroUnitContainer: {
            width: '100%',
            position: 'relative',
            display: 'flex',
            overflow: 'hidden',
            alignItems: 'center',
            flexDirection: 'column',
            cursor: 'pointer',
            // image containers need images to fill them, so we set the width and height to 100%
            '& img': {
                width: '100%',
                height: '100%'
            }
        },
        heroUnitForegroundContainer: {
            height: '100%',
            aspectRatio: '1',
            display: 'flex',
            flexDirection: 'column',
            '--parallax-scale': `${foregroundParallaxLarge * 2}`,
            transform: 'translateY(calc(var(--parallax-scale) * ((var(--scroll) * -1px) + 1px)))',
            position: 'absolute',
            top: '0px',
            '@media (max-width: 600px)': {
                height: '70%',
                '--parallax-scale': `${foregroundParallaxSmall * 2}`
            },
            '@media (min-width: 601px) and (max-width: 1140px)': {
                height: 'calc(70% + ((108 * (100vw - 600px)) / 540))'
            }
        },
        heroUnitTopSpacer: {
            height: `${foregroundParallaxLarge}px`,
            '@media (max-width: 600px)': {
                height: `${foregroundParallaxSmall}px`
            }
        }
    }))();
    // used to maintain the distance from top of hero unit to the bottom of the window, which
    // is used to calculate the transform of the background and foreground images for parallax
    useEffect(() => {
        const easeInOut = bezier(0.25, 0.25, 0.5, 1);
        const updatePosition = () => {
            if (heroUnitContentRef.current) {
                const rect = heroUnitContentRef.current.getBoundingClientRect();
                // calculate the scroll progress based on the distance from the top of the hero unit top of the viewport
                // this will reach maximum value when the bottom of the hero unit is at 75% viewport height
                const scrollProgress = Math.min((window.innerHeight - rect.top) / (window.innerHeight * 0.75), 1);
                const brezierNormalized = easeInOut(scrollProgress);
                if (heroUnitContainerRef.current) {
                    heroUnitContainerRef.current.style.setProperty('--scroll', brezierNormalized.toString());
                }
            }
        };
        updatePosition();
        window.addEventListener('scroll', updatePosition);
        window.addEventListener('resize', updatePosition);
        return () => {
            window.removeEventListener('scroll', updatePosition);
            window.removeEventListener('resize', updatePosition);
        };
    }, []);
    return (React.createElement(Container, { ref: heroUnitContainerRef, disableGutters: true, maxWidth: false, className: heroUnitContainer, onClick: onBackgroundClick, "data-testid": 'hero-unit' },
        React.createElement("div", { className: heroUnitTopSpacer }),
        React.createElement(HeroUnitBackground, { backgroundImageComponent: backgroundImageComponent }),
        React.createElement("div", { className: heroUnitForegroundContainer }, foregroundImageComponent),
        React.createElement(HeroUnitContent, { title: title, subtitle: subtitle, heroUnitRef: heroUnitContentRef, gradient: gradient, bottomRowComponent: bottomRowComponent, overlayPillComponent: overlayPillComponent })));
};

/**
 * AttributionRow component displays a row with a thumbnail, title, subtitle, and a button.
 *
 * @component
 * @param {string} title - The title text to be displayed.
 * @param {string} subtitle - The subtitle text to be displayed.
 * @param {React.ReactNode} leftAssetComponent - The component to be displayed on the left
 * @param {React.ReactNode} rightButtonComponent - The component to be displayed as the button on the right.
 *
 * @returns {JSX.Element} The rendered attribution row component.
 *
 * @example
 * <AttributionRow
 *   title="Sample Title"
 *   subtitle="Sample Subtitle"
 *   thumbnailComponent={<img src="thumbnail.jpg" alt="thumbnail" />}
 *   rightButtonComponent={<button>Join</button>}
 * />
 */
const AttributionRow = ({ title, subtitle, leftAssetComponent: thumbnailComponent, rightButtonComponent }) => {
    const { classes: { attributionRowContainer, attributionRowThumbnailContainer, attributionRowTextContainer, attributionRowButtonContainer, assetTitle, assetSubtitle } } = makeStyles()(() => ({
        attributionRowContainer: {
            display: 'flex',
            position: 'relative',
            flexDirection: 'row',
            alignItems: 'center',
            width: '100%',
            height: '40px'
        },
        attributionRowThumbnailContainer: {
            height: '100%',
            aspectRatio: `1`,
            display: 'flex',
            flexDirection: 'column',
            borderRadius: '8px',
            overflow: 'hidden'
        },
        attributionRowTextContainer: {
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'flex-start',
            height: '100%',
            marginLeft: '12px'
        },
        attributionRowButtonContainer: {
            marginLeft: 'auto'
        },
        assetTitle: {
            color: 'white',
            fontFamily: 'Builder Sans',
            fontSize: '14px',
            fontWeight: 700,
            lineHeight: '19.6px',
            textShadow: `${textDropShadow}`
        },
        assetSubtitle: {
            marginTop: 'auto',
            color: 'white',
            fontFamily: 'Builder Sans',
            fontSize: '14px',
            fontWeight: 400,
            lineHeight: '19.6px',
            textShadow: `${textDropShadow}`
        }
    }))();
    return (React.createElement("div", { className: attributionRowContainer },
        React.createElement("div", { className: attributionRowThumbnailContainer }, thumbnailComponent),
        React.createElement("div", { className: attributionRowTextContainer },
            React.createElement("span", { className: assetTitle }, title),
            React.createElement("span", { className: assetSubtitle }, subtitle)),
        React.createElement("div", { className: attributionRowButtonContainer }, rightButtonComponent)));
};

/**
 * CtaButton component renders a styled button that triggers a callback function when clicked.
 *
 * @component
 * @param {Object} props - The properties object.
 * @param {Function} props.onButtonClick - The callback function to be called when the button is clicked.
 *
 * @returns {JSX.Element} The rendered button component.
 *
 * @example
 * // Example usage:
 * // <CtaButton onButtonClick={() => console.log('Button clicked!')} />
 *
 */
const CtaButton = ({ onButtonClick }) => {
    const { classes: { ctaButton } } = makeStyles()(() => ({
        ctaButton: {
            color: 'white',
            backgroundColor: '#335FFF',
            '&:hover': {
                backgroundColor: '#335FFF'
            },
            width: '188px',
            borderRadius: '8px',
            '@media (max-width: 600px)': {
                width: '40px'
            },
            height: '40px'
        }
    }))();
    return (React.createElement(Button, { className: ctaButton, onClick: onButtonClick }, "Join"));
};

const OverlayPill = ({ pillText }) => {
    const { classes: { heroUnitPill, heroUnitPillText, } } = makeStyles()(() => ({
        heroUnitPill: {
            width: '76px',
            height: '24px',
            borderRadius: '16px',
            backgroundColor: 'white',
            color: 'black',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            marginBottom: 'auto'
        },
        heroUnitPillText: {
            fontFamily: 'Builder Sans',
            fontSize: '12px',
            fontWeight: 600,
            lineHeight: '12px'
        },
    }))();
    return (React.createElement("div", { className: heroUnitPill },
        React.createElement("span", { className: heroUnitPillText }, pillText)));
};

export { AttributionRow, CtaButton, HeroUnit, OverlayPill };
